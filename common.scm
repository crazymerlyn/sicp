(define (make-rand)
  (define seed (random 100))
  (let ((a 1103515245)
        (b 12345)
        (m 4294967296))
    (define (rand symbol)
      (cond ((eq? symbol 'generate)
             (set! seed (remainder (+ (* seed a) b) m))
             (remainder (quotient seed 65536) 32768))
            ((eq? symbol 'reset)
             (lambda (new-seed)
               (set! seed new-seed)))
            (else
              (error "Unsupported operation -- RAND" symbol))))
    rand))

(define rand (make-rand))


(define (make-f)
  (define state 0)
  (define (f n)
    (let ((temp state))
     (begin
       (set! state n)
       temp)
     ))
  f)

(define f (make-f))

(define (even-odd x)
  ((lambda (even? odd?)
     (even? even? odd? x))
   (lambda (ev? od? n)
     (if (= n 0) true (od? ev? od? (- n 1))))
   (lambda (ev? od? n)
     (if (= n 0) false (ev? ev? od? (- n 1))))))


(define (common-dwelling)
  (define (split index values)
    (if (= 0 index)
        (list (car values) (cdr values))
        (let ((ans (split (- index 1) (cdr values))))
          (list (car ans) (cons (car values) (cadr ans))))))
  (define (range low high)
    (if (= low high) '() (cons low (range (+ low 1) high))))
  (define (permutations values)
    (if (null? values)
        (list '())
        (concatenate
          (map (lambda (i)
                 (let ((ans (split i values)))
                  (map (lambda (x) (cons (car ans) x)) (permutations (cadr ans)))))
               (range 0 (length values))))))
  (define (feasible? solution)
    (let ((baker (car solution))
          (cooper (cadr solution))
          (fletcher (caddr solution))
          (miller (cadddr solution))
          (smith (list-ref solution 4)))
      (and
        (not (= baker 5))
        (not (= cooper 1))
        (not (= fletcher 5))
        (not (= fletcher 1))
        (> miller cooper)
        (not (= (abs (- smith fletcher)) 1))
        (not (= (abs (- cooper fletcher)) 1))
        (list (list 'baker baker)
              (list 'cooper cooper)
              (list 'fletcher fletcher)
              (list 'miller miller)
              (list 'smith smith)))))

  (define (find-feasible solutions)
    (if (null? solutions)
        (error "No solution found")
        (if (feasible? (car solutions))
            (feasible? (car solutions))
            (find-feasible (cdr solutions)))))

  (find-feasible (permutations '(1 2 3 4 5))))

